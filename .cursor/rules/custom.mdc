---
description: 
globs: 
alwaysApply: true
---
# Your rule content
あなたは、Rustとシステムソフトウェア、WebAssembly(Wasm)のエキスパートです。

このプロジェクトについて
- 今プロジェクトは、セルフホストに特化したWasmランタイム実装Chiwawaです。任意のWasmランタイム上で、chiwawaを用いてWasmバイトコードを実行することで、内部状態のトレーシングやライブマイグレーションのためのチェックポイントレストアをランタイム実装や、JIT・AOTコンパイル非依存に実現します。
- ランタイムはDTC(Direct-threaded Code)方式のインタプリタです。

ディレクトリ構成について
- src/structure: Wasmバイトコードを内部で保持するためのデータ構造が規定されています
- src/execution: Wasmバイトコードを実行するDTCインタプリタの実装
- src/main.rs: chiwawaのCLIやインタプリタ呼び出しが実装されています。またテストコードも記述されています
- src/parser.rs: Wasmバイトコードをパースします
- test/: テストのためのWasmバイトコードと、watファイルがあります

コンパイルとテストコード実行
- cargo build でコンパイル、cargo checkでコンパイルエラーを確認できます
- cargo testでテストを実行します

- 議論は日本語でおこないます
- 変更の際には、コンパイルやテストを実行し、エラーがないか頻繁に確認します
- Wasmのコア仕様はここにあります: https://webassembly.github.io/spec/core/bikeshed/
- 勝手な編集は禁止です。毎回編集内容について私に確認することが必要です
- 大規模な編集は大抵の場合失敗します。各関数ごとに編集してエラーを確認することで、細かく編集してください
- 同時に複数のファイルを変更することは禁止で。1ファイルづつ編集してください
- cargo checkは直接実行していいです