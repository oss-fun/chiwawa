use anyhow::{Result};
use clap::{Parser};
use chiwawa::{parser,structure::module::Module,execution::module::*, execution::value::*};
use std::collections::HashMap;
use fancy_regex::Regex;

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Cli {
    path: String,
    #[arg(short, long, default_value = "main")]
    invoke: String,
    #[arg(short, long, value_delimiter = ',', num_args = 0..)]
    params: Option<Vec<String>>,
}

fn parse_params(params: Vec<String>) -> Vec<Val> {
    let mut parsed: Vec<Val> = Vec::new();
    let re = Regex::new(r"(?<=\().*(?=\))").unwrap();
    for param in params {
        if param.contains("I32") {
            let captures = re.captures(&param).expect("Error running regex").expect("No match found").get(0).expect("No group");
            parsed.push(Val::Num(Num::I32(captures.as_str().parse::<i32>().unwrap())));
        } else if param.contains("I64") {
            let captures = re.captures(&param).expect("Error running regex").expect("No match found").get(0).expect("No group");
            parsed.push(Val::Num(Num::I64(captures.as_str().parse::<i64>().unwrap())));
        } else if param.contains("F32") {
            let captures = re.captures(&param).expect("Error running regex").expect("No match found").get(0).expect("No group");
            parsed.push(Val::Num(Num::F32(captures.as_str().parse::<f32>().unwrap())));
        } else if param.contains("F64") {
            let captures = re.captures(&param).expect("Error running regex").expect("No match found").get(0).expect("No group");
            parsed.push(Val::Num(Num::F64(captures.as_str().parse::<f64>().unwrap())));
        }
    }
    return parsed
}
fn main() -> Result <()>{
    let cli = Cli::parse();
    let params: Vec<Val> = match cli.params{
        Some(p) => parse_params(p),
        None => vec![]
    };
    let mut module = Module::new("test");
    let _ = parser::parse_bytecode(&mut module, &cli.path);        
    let mut imports: ImportObjects = HashMap::new();
    let inst = ModuleInst::new(&module, imports).unwrap();
    let ret = inst.get_export_func(&cli.invoke)?.call(params);
    println!("pi{}", ret?.pop().unwrap().to_f64());
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::collections::HashMap;
    use chiwawa::{parser,structure::module::Module};

    #[test]
    fn run_i32() {
        let mut module = Module::new("test");
        let _ = parser::parse_bytecode(&mut module, "test/i32.wasm");    
        let imports: ImportObjects = HashMap::new();
        let inst = ModuleInst::new(&module, imports).unwrap();

        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2);
        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I32(0x3fffffff)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x40000000 as i32);

        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I32(0x3fffffff)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x40000000 as i32);

        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  1);

        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  0);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  1);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  0xc0000000u32 as i32);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(5)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(5)),Val::Num(Num::I32(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  -2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I32(-5)),Val::Num(Num::I32(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(),  2);

        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x40000000);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(0x80000001u32 as i32)),Val::Num(Num::I32(1000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x20c49b);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(5)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(5)),Val::Num(Num::I32(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(-5)),Val::Num(Num::I32(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I32(17)),Val::Num(Num::I32(7))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);

        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(5)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I32(-5)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);

        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(0x8ff00ff0u32 as i32)),Val::Num(Num::I32(0x10001))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x8001);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(5)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(-5)),Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I32(-5)),Val::Num(Num::I32(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -5);

        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(0xf0f0ffffu32 as i32)),Val::Num(Num::I32(0xfffff0f0u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xf0f0f0f0u32 as i32);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I32(0xffffffffu32 as i32)),Val::Num(Num::I32(0xffffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);

        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I32(0xf0f0ffffu32 as i32)),Val::Num(Num::I32(0xfffff0f0u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);

        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I32(0xf0f0ffffu32 as i32)),Val::Num(Num::I32(0xfffff0f0u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x0f0f0f0fu32 as i32);

        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xfffffffeu32 as i32);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I32(0x40000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x3fffffffu32 as i32);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xc0000000u32 as i32);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(0x40000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x20000000u32 as i32);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);

        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x3fffffffu32 as i32);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x40000000u32 as i32);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(0x40000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x20000000u32 as i32);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0xabcd9876u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x579b30edu32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0xfe00dc00u32 as i32)),Val::Num(Num::I32(4))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xe00dc00fu32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0xb0c1d2e3u32 as i32)),Val::Num(Num::I32(5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x183a5c76u32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0x00008000u32 as i32)),Val::Num(Num::I32(37))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00100000u32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0xb0c1d2e3u32 as i32)),Val::Num(Num::I32(0xff05u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x183a5c76u32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0x769abcdfu32 as i32)),Val::Num(Num::I32(0xffffffedu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x579beed3u32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0x769abcdfu32 as i32)),Val::Num(Num::I32(0x8000000du32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x579beed3u32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0xff00cc00u32 as i32)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7f806600u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0x00080000u32 as i32)),Val::Num(Num::I32(4))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00008000u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0xb0c1d2e3u32 as i32)),Val::Num(Num::I32(5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x1d860e97u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0x00008000u32 as i32)),Val::Num(Num::I32(37))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000400u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0xb0c1d2e3u32 as i32)),Val::Num(Num::I32(0xff05u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x1d860e97u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0x769abcdfu32 as i32)),Val::Num(Num::I32(0xffffffedu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xe6fbb4d5u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0x769abcdfu32 as i32)),Val::Num(Num::I32(0x8000000du32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xe6fbb4d5u32 as i32);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(31))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(0xffffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 32);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(0x00008000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 16);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(0xffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 24);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 31);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 30);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 32);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I32(0x00008000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 15);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I32(0x00010000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 16);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 31);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 32);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0x00008000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0x80008000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 31);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0xAAAAAAAAu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 16);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0x55555555u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 16);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I32(0xDEADBEEFu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 24);

        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I32(0xffffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)),Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(1)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(-1)),Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)),Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);


        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);


        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(1)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(-1)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32)), Val::Num(Num::I32(0x7fffffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ge_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffffu32 as i32)), Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(0x7f))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 127);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(0x80))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -128);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(0xff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(0x01234500u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(0xfedcba80u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -0x80);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);

        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 32767);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(0x8000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -32768);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(0xffffu32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(0x01230000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(0xfedc8000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -0x8000);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);

    }
    #[test]
    fn run_i64(){
        let mut module = Module::new("test");
        let _ = parser::parse_bytecode(&mut module, "test/i64.wasm");    
        let imports: ImportObjects = HashMap::new();
        let inst = ModuleInst::new(&module, imports).unwrap();

        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("add").unwrap().call(vec![Val::Num(Num::I64(0x3fffffffu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x40000000u64 as i64);

        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("sub").unwrap().call(vec![Val::Num(Num::I64(0x3fffffffu64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x40000000u64 as i64);

        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("mul").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000001u64 as i64);

        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xc000000000000000u64 as i64);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000001u64 as i64)), Val::Num(Num::I64(1000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffdf3b645a1cac09u64 as i64);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(7)), Val::Num(Num::I64(3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(-7)), Val::Num(Num::I64(3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(7)), Val::Num(Num::I64(-3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(-7)), Val::Num(Num::I64(-3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(11)), Val::Num(Num::I64(5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_s").unwrap().call(vec![Val::Num(Num::I64(17)), Val::Num(Num::I64(7))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);

        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x4000000000000000u64 as i64);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(0x8ff00ff00ff00ff0u64 as i64)), Val::Num(Num::I64(0x100000001u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8ff00fefu64 as i64);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000001u64 as i64)), Val::Num(Num::I64(1000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x20c49ba5e353f7u64 as i64);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x7ffffffffffffffdu64 as i64);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(7)), Val::Num(Num::I64(3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(11)), Val::Num(Num::I64(5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("div_u").unwrap().call(vec![Val::Num(Num::I64(17)), Val::Num(Num::I64(7))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);

        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000001u64 as i64)), Val::Num(Num::I64(1000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -807);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(7)), Val::Num(Num::I64(3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(-7)), Val::Num(Num::I64(3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(7)), Val::Num(Num::I64(-3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(-7)), Val::Num(Num::I64(-3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(11)), Val::Num(Num::I64(5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_s").unwrap().call(vec![Val::Num(Num::I64(17)), Val::Num(Num::I64(7))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 3);

        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(0x8ff00ff00ff00ff0u64 as i64)), Val::Num(Num::I64(0x100000001u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x80000001u64 as i64);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000001u64 as i64)), Val::Num(Num::I64(1000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 809);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 5);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(-5)), Val::Num(Num::I64(-2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -5);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(7)), Val::Num(Num::I64(3))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(11)), Val::Num(Num::I64(5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rem_u").unwrap().call(vec![Val::Num(Num::I64(17)), Val::Num(Num::I64(7))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 3);

        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x7fffffffffffffffu64 as i64);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(0xf0f0ffffu64 as i64)), Val::Num(Num::I64(0xfffff0f0u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xf0f0f0f0u64 as i64);
        let ret = inst.get_export_func("and").unwrap().call(vec![Val::Num(Num::I64(0xffffffffffffffffu64 as i64)), Val::Num(Num::I64(0xffffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffffffffffffu64 as i64);

        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(0xf0f0ffffu64 as i64)), Val::Num(Num::I64(0xfffff0f0u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffffu64 as i64);
        let ret = inst.get_export_func("or").unwrap().call(vec![Val::Num(Num::I64(0xffffffffffffffffu64 as i64)), Val::Num(Num::I64(0xffffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffffffffffffu64 as i64);

        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x7fffffffffffffffu64 as i64);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(0xf0f0ffffu64 as i64)), Val::Num(Num::I64(0xfffff0f0u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x0f0f0f0fu64 as i64);
        let ret = inst.get_export_func("xor").unwrap().call(vec![Val::Num(Num::I64(0xffffffffffffffffu64 as i64)), Val::Num(Num::I64(0xffffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);

        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xfffffffffffffffeu64 as i64);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(0xffffffffffffffffu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xfffffffffffffffeu64 as i64);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(0x4000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("shl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);

        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x3fffffffffffffffu64 as i64);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xc000000000000000u64 as i64);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(0x4000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x2000000000000000u64 as i64);
        let ret = inst.get_export_func("shr_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);

        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x7fffffffffffffffu64 as i64);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x3fffffffffffffffu64 as i64);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x4000000000000000u64 as i64);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(0x4000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x2000000000000000u64 as i64);
        let ret = inst.get_export_func("shr_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);

        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xabcd987602468aceu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x579b30ec048d159du64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xfe000000dc000000u64 as i64)), Val::Num(Num::I64(4))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xe000000dc000000fu64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xabcd1234ef567809u64 as i64)), Val::Num(Num::I64(53))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x013579a2469deacfu64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xabd1234ef567809cu64 as i64)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x55e891a77ab3c04eu64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xabcd1234ef567809u64 as i64)), Val::Num(Num::I64(0xf5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x013579a2469deacfu64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xabcd7294ef567809u64 as i64)), Val::Num(Num::I64(0xffffffffffffffedu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xcf013579ae529deau64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0xabd1234ef567809cu64 as i64)), Val::Num(Num::I64(0x800000000000003fu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x55e891a77ab3c04eu64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("rotl").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);

        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x8000000000000000u64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xabcd987602468aceu64 as i64)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x55e6cc3b01234567u64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xfe000000dc000000u64 as i64)), Val::Num(Num::I64(4))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x0fe000000dc00000u64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xabcd1234ef567809u64 as i64)), Val::Num(Num::I64(53))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x6891a77ab3c04d5eu64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xabd1234ef567809cu64 as i64)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x57a2469deacf0139u64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xabcd1234ef567809u64 as i64)), Val::Num(Num::I64(0xf5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x6891a77ab3c04d5eu64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xabcd7294ef567809u64 as i64)), Val::Num(Num::I64(0xffffffffffffffedu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x94a77ab3c04d5e6bu64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0xabd1234ef567809cu64 as i64)), Val::Num(Num::I64(0x800000000000003fu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x57a2469deacf0139u64 as i64);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 2);
        let ret = inst.get_export_func("rotr").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(63))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);

        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(0xffffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 64);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(0x00008000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 48);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(0xff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 56);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 63);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(2))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 62);
        let ret = inst.get_export_func("clz").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);

        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 64);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I64(0x00008000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 15);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I64(0x00010000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 16);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 63);
        let ret = inst.get_export_func("ctz").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);

        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 64);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0x00008000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0x8000800080008000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 63);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0xAAAAAAAA55555555u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 32);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0x99999999AAAAAAAAu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 32);
        let ret = inst.get_export_func("popcnt").unwrap().call(vec![Val::Num(Num::I64(0xDEADBEEFDEADBEEFu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 48);

        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(0x7f))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 127);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(0x80))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -128);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(0xff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(0x0123456789abcd00u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(0xfedcba9876543280u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -0x80);
        let ret = inst.get_export_func("extend8_s").unwrap().call(vec![Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);

        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(0x7fff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 32767);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(0x8000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -32768);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(0xffff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(0x123456789abc0000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(0xfedcba9876548000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -0x8000);
        let ret = inst.get_export_func("extend16_s").unwrap().call(vec![Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);

        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0x7fff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 32767);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0x8000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 32768);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0xffff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 65535);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x7fffffffu64 as i64);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0xffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(0x0123456700000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("extend32_s").unwrap().call(vec![Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);

        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eqz").unwrap().call(vec![Val::Num(Num::I64(0xffffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("eq").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("ne").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("lt_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("le_u").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_s").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);

        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0x7fffffffffffffffu64 as i64)), Val::Num(Num::I64(0x7fffffffffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(1)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(0x8000000000000000u64 as i64)), Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("gt_u").unwrap().call(vec![Val::Num(Num::I64(-1)), Val::Num(Num::I64(0x8000000000000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);


    }

    #[test]
    fn run_conversions() {
        let mut module = Module::new("test");
        let _ = parser::parse_bytecode(&mut module, "test/conversions.wasm");    
        let imports: ImportObjects = HashMap::new();
        let inst = ModuleInst::new(&module, imports).unwrap();

        let ret = inst.get_export_func("i64.extend_i32_s").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.extend_i32_s").unwrap().call(vec![Val::Num(Num::I32(10000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 10000);
        let ret = inst.get_export_func("i64.extend_i32_s").unwrap().call(vec![Val::Num(Num::I32(-10000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -10000);
        let ret = inst.get_export_func("i64.extend_i32_s").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.extend_i32_s").unwrap().call(vec![Val::Num(Num::I32(0x7fffffff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x000000007fffffff);
        let ret = inst.get_export_func("i64.extend_i32_s").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffff80000000u64 as i64);

        let ret = inst.get_export_func("i64.extend_i32_u").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.extend_i32_u").unwrap().call(vec![Val::Num(Num::I32(10000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 10000);
        let ret = inst.get_export_func("i64.extend_i32_u").unwrap().call(vec![Val::Num(Num::I32(-10000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x00000000ffffd8f0);
        let ret = inst.get_export_func("i64.extend_i32_u").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffff);
        let ret = inst.get_export_func("i64.extend_i32_u").unwrap().call(vec![Val::Num(Num::I32(0x7fffffff))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x000000007fffffff);
        let ret = inst.get_export_func("i64.extend_i32_u").unwrap().call(vec![Val::Num(Num::I32(0x80000000u32 as i32))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x0000000080000000);

        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(-100000))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -100000);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0x80000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0xffffffff7fffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0xffffffff00000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000000u32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0xfffffffeffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0xffffffff00000001u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000001u32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(1311768467463790320))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x9abcdef0u32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0x00000000ffffffffu64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0x0000000100000000u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000000u32 as i32);
        let ret = inst.get_export_func("i32.wrap_i64").unwrap().call(vec![Val::Num(Num::I64(0x0000000100000001u64 as i64))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000001u32 as i32);

        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(2147483520.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2147483520);
        let ret = inst.get_export_func("i32.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);

        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(4294967040.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -256);

        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(2147483647.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2147483647);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2147483648.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(2147483647.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2147483647);

        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967295.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e8))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 100000000);
        let ret = inst.get_export_func("i32.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(-0.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4294967296);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -4294967296);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(9223371487098961920.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 9223371487098961920);
        let ret = inst.get_export_func("i64.trunc_f32_s").unwrap().call(vec![Val::Num(Num::F32(-9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -9223372036854775808);


        let ret = inst.get_export_func("i64.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4294967296);
        let ret = inst.get_export_func("i64.trunc_f32_u").unwrap().call(vec![Val::Num(Num::F32(18446742974197923840.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1099511627776);


        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4294967296);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -4294967296);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(9223372036854774784.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 9223372036854774784);
        let ret = inst.get_export_func("i64.trunc_f64_s").unwrap().call(vec![Val::Num(Num::F64(-9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -9223372036854775808);

        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967295.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffff);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x100000000);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(18446744073709549568.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -2048);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e8))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 100000000);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e16))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 10000000000000000);
        let ret = inst.get_export_func("i64.trunc_f64_u").unwrap().call(vec![Val::Num(Num::F64(9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -9223372036854775808);

        let ret = inst.get_export_func("f32.convert_i32_s").unwrap().call(vec![Val::Num(Num::I32(1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_f32(), 1.0);
        let ret = inst.get_export_func("f32.convert_i32_s").unwrap().call(vec![Val::Num(Num::I32(-1))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_f32(), -1.0);
        let ret = inst.get_export_func("f32.convert_i32_s").unwrap().call(vec![Val::Num(Num::I32(0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_f32(), 0.0);
        let ret = inst.get_export_func("f32.convert_i32_s").unwrap().call(vec![Val::Num(Num::I32(2147483647))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_f32(), 2147483648.0);
        let ret = inst.get_export_func("f32.convert_i32_s").unwrap().call(vec![Val::Num(Num::I32(-2147483648))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_f32(), -2147483648.0);

        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(2147483520.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2147483520);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-2147483904.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::from_bits(0x200000)))]); 
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-f32::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-f32::from_bits(0x200000)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(4294967040.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -256);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000000);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x00000000u32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::from_bits(0x200000)))]); 
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-f32::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-f32::from_bits(0x200000)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(2147483647.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2147483647);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-2147483649.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x7fffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0x80000000u32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::from_bits(0x4000000000000)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-f64::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-f64::from_bits(0x4000000000000)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::from_bits(0x0000000000000001)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::from_bits(0x8000000000000001)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.0999999999999999))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(2.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 2);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(2147483648.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -2147483648);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967295.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), -1);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(-0.9))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e8))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 100000000);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e16))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e30))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0xffffffffu32 as i32);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::from_bits(0x7ff4000000000000)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);
        let ret = inst.get_export_func("i32.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::from_bits(0xfff4000000000000)))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i32(), 0);

        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-f32::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4294967296);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -4294967296);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(9223371487098961920.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 9223371487098961920);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -9223372036854775808);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MAX);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(-9223373136366403584.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MIN);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MAX);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MIN);
        let ret = inst.get_export_func("i64.trunc_sat_f32_s").unwrap().call(vec![Val::Num(Num::F32(f32::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);

        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-f32::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4294967296);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(18446742974197923840.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1099511627776);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(18446744073709551616.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), u64::MAX as i64);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), u64::MAX as i64);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f32_u").unwrap().call(vec![Val::Num(Num::F32(f32::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);

        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-f64::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -1);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 4294967296);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -4294967296);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(9223372036854774784.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 9223372036854774784);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), -9223372036854775808);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MAX);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(-9223372036854777856.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MIN);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MAX);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MIN);
        let ret = inst.get_export_func("i64.trunc_sat_f64_s").unwrap().call(vec![Val::Num(Num::F64(f64::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);


        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(-0.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(-f64::MIN_POSITIVE))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1.5))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 1);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967295.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0xffffffff);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(4294967296.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0x100000000);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e8))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 100000000);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(1e16))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 10000000000000000);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(9223372036854775808.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), i64::MIN);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(18446744073709551616.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), u64::MAX as i64);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(-1.0))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), u64::MAX as i64);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::NEG_INFINITY))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        let ret = inst.get_export_func("i64.trunc_sat_f64_u").unwrap().call(vec![Val::Num(Num::F64(f64::NAN))]);
        assert_eq!(ret.unwrap().pop().unwrap().to_i64(), 0);
        
    }
}