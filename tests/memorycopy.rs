use chiwawa::{
    execution::module::*, execution::runtime::Runtime, execution::value::*, parser,
    structure::module::Module,
};
use std::collections::HashMap;
use std::sync::Arc;

#[cfg(test)]
mod tests {
    use super::*;

    fn load_instance(wasm_path: &str) -> Arc<ModuleInst> {
        let mut module = Module::new("test");
        let _ = parser::parse_bytecode(&mut module, wasm_path, true);
        let imports: ImportObjects = HashMap::new();
        ModuleInst::new(&module, imports, Vec::new(), Vec::new()).unwrap()
    }

    fn call_function(
        inst: &Arc<ModuleInst>,
        func_name: &str,
        params: Vec<Val>,
    ) -> Result<Vec<Val>, chiwawa::error::RuntimeError> {
        let func_addr = inst.get_export_func(func_name)?;
        let mut runtime = Runtime::new(Arc::clone(inst), &func_addr, params, true)?;
        runtime.run()
    }

    #[test]
    fn test_memory_copy1() {
        let inst = load_instance("tests/wasm/memorycopy-1.wasm");

        // First invoke "test" function
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 7),
            (13, 5),
            (14, 2),
            (15, 3),
            (16, 6),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 0),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {}",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy2() {
        let inst = load_instance("tests/wasm/memorycopy-2.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 3 bytes from address 2 to address 13
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        // Expected result after memory.copy: addresses 13,14,15 should now contain 3,1,4
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 7),
            (13, 3),
            (14, 1),
            (15, 4),
            (16, 6),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 0),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }
    #[test]
    fn test_memory_copy3() {
        let inst = load_instance("tests/wasm/memorycopy-3.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 2 bytes from address 15 to address 25
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        // Expected result after memory.copy: addresses 25,26 should now contain 3,6
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 7),
            (13, 5),
            (14, 2),
            (15, 3),
            (16, 6),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 3),
            (26, 6),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy4() {
        let inst = load_instance("tests/wasm/memorycopy-4.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 3 bytes from address 25 to address 13
        // Since address 25+ are all zeros, this will zero out addresses 13,14,15
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        // Expected result after memory.copy: addresses 13,14,15 should now be 0
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 7),
            (13, 0),
            (14, 0),
            (15, 0),
            (16, 6),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 0),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy5() {
        let inst = load_instance("tests/wasm/memorycopy-5.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 4 bytes from address 22 to address 20 (all zeros)
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 7),
            (13, 5),
            (14, 2),
            (15, 3),
            (16, 6),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 0),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy6() {
        let inst = load_instance("tests/wasm/memorycopy-6.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 3 bytes from address 1 to address 25 (0,3,1)
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 7),
            (13, 5),
            (14, 2),
            (15, 3),
            (16, 6),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 3),
            (27, 1),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy7() {
        let inst = load_instance("tests/wasm/memorycopy-7.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 7 bytes from address 12 to address 10 (7,5,2,3,6,0,0)
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 7),
            (11, 5),
            (12, 2),
            (13, 3),
            (14, 6),
            (15, 0),
            (16, 0),
            (17, 0),
            (18, 0),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 0),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy8() {
        let inst = load_instance("tests/wasm/memorycopy-8.wasm");

        // First invoke "test" function which performs memory.copy operation
        // Copies 7 bytes from address 10 to address 12 (overlapping copy)
        let _result = call_function(&inst, "test", vec![]);

        // Then check all memory locations sequentially
        let expected_values = [
            (0, 0),
            (1, 0),
            (2, 3),
            (3, 1),
            (4, 4),
            (5, 1),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (12, 0),
            (13, 0),
            (14, 7),
            (15, 5),
            (16, 2),
            (17, 3),
            (18, 6),
            (19, 0),
            (20, 0),
            (21, 0),
            (22, 0),
            (23, 0),
            (24, 0),
            (25, 0),
            (26, 0),
            (27, 0),
            (28, 0),
            (29, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {} after memory.copy",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy9() {
        let inst = load_instance("tests/wasm/memorycopy-9.wasm");

        // Check all memory addresses from comments
        let expected_values = [
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (6, 6),
            (7, 7),
            (8, 8),
            (9, 9),
            (10, 10),
            (11, 11),
            (12, 12),
            (13, 13),
            (14, 14),
            (15, 15),
            (16, 16),
            (17, 17),
            (18, 18),
            (19, 19),
            (218, 0),
            (417, 0),
            (616, 0),
            (815, 0),
            (1014, 0),
            (1213, 0),
            (1412, 0),
            (1611, 0),
            (1810, 0),
            (2009, 0),
            (2208, 0),
            (2407, 0),
            (2606, 0),
            (2805, 0),
            (3004, 0),
            (3203, 0),
            (3402, 0),
            (3601, 0),
            (3800, 0),
            (3999, 0),
            (4198, 0),
            (4397, 0),
            (4596, 0),
            (4795, 0),
            (4994, 0),
            (5193, 0),
            (5392, 0),
            (5591, 0),
            (5790, 0),
            (5989, 0),
            (6188, 0),
            (6387, 0),
            (6586, 0),
            (6785, 0),
            (6984, 0),
            (7183, 0),
            (7382, 0),
            (7581, 0),
            (7780, 0),
            (7979, 0),
            (8178, 0),
            (8377, 0),
            (8576, 0),
            (8775, 0),
            (8974, 0),
            (9173, 0),
            (9372, 0),
            (9571, 0),
            (9770, 0),
            (9969, 0),
            (10168, 0),
            (10367, 0),
            (10566, 0),
            (10765, 0),
            (10964, 0),
            (11163, 0),
            (11362, 0),
            (11561, 0),
            (11760, 0),
            (11959, 0),
            (12158, 0),
            (12357, 0),
            (12556, 0),
            (12755, 0),
            (12954, 0),
            (13153, 0),
            (13352, 0),
            (13551, 0),
            (13750, 0),
            (13949, 0),
            (14148, 0),
            (14347, 0),
            (14546, 0),
            (14745, 0),
            (14944, 0),
            (15143, 0),
            (15342, 0),
            (15541, 0),
            (15740, 0),
            (15939, 0),
            (16138, 0),
            (16337, 0),
            (16536, 0),
            (16735, 0),
            (16934, 0),
            (17133, 0),
            (17332, 0),
            (17531, 0),
            (17730, 0),
            (17929, 0),
            (18128, 0),
            (18327, 0),
            (18526, 0),
            (18725, 0),
            (18924, 0),
            (19123, 0),
            (19322, 0),
            (19521, 0),
            (19720, 0),
            (19919, 0),
            (20118, 0),
            (20317, 0),
            (20516, 0),
            (20715, 0),
            (20914, 0),
            (21113, 0),
            (21312, 0),
            (21511, 0),
            (21710, 0),
            (21909, 0),
            (22108, 0),
            (22307, 0),
            (22506, 0),
            (22705, 0),
            (22904, 0),
            (23103, 0),
            (23302, 0),
            (23501, 0),
            (23700, 0),
            (23899, 0),
            (24098, 0),
            (24297, 0),
            (24496, 0),
            (24695, 0),
            (24894, 0),
            (25093, 0),
            (25292, 0),
            (25491, 0),
            (25690, 0),
            (25889, 0),
            (26088, 0),
            (26287, 0),
            (26486, 0),
            (26685, 0),
            (26884, 0),
            (27083, 0),
            (27282, 0),
            (27481, 0),
            (27680, 0),
            (27879, 0),
            (28078, 0),
            (28277, 0),
            (28476, 0),
            (28675, 0),
            (28874, 0),
            (29073, 0),
            (29272, 0),
            (29471, 0),
            (29670, 0),
            (29869, 0),
            (30068, 0),
            (30267, 0),
            (30466, 0),
            (30665, 0),
            (30864, 0),
            (31063, 0),
            (31262, 0),
            (31461, 0),
            (31660, 0),
            (31859, 0),
            (32058, 0),
            (32257, 0),
            (32456, 0),
            (32655, 0),
            (32854, 0),
            (33053, 0),
            (33252, 0),
            (33451, 0),
            (33650, 0),
            (33849, 0),
            (34048, 0),
            (34247, 0),
            (34446, 0),
            (34645, 0),
            (34844, 0),
            (35043, 0),
            (35242, 0),
            (35441, 0),
            (35640, 0),
            (35839, 0),
            (36038, 0),
            (36237, 0),
            (36436, 0),
            (36635, 0),
            (36834, 0),
            (37033, 0),
            (37232, 0),
            (37431, 0),
            (37630, 0),
            (37829, 0),
            (38028, 0),
            (38227, 0),
            (38426, 0),
            (38625, 0),
            (38824, 0),
            (39023, 0),
            (39222, 0),
            (39421, 0),
            (39620, 0),
            (39819, 0),
            (40018, 0),
            (40217, 0),
            (40416, 0),
            (40615, 0),
            (40814, 0),
            (41013, 0),
            (41212, 0),
            (41411, 0),
            (41610, 0),
            (41809, 0),
            (42008, 0),
            (42207, 0),
            (42406, 0),
            (42605, 0),
            (42804, 0),
            (43003, 0),
            (43202, 0),
            (43401, 0),
            (43600, 0),
            (43799, 0),
            (43998, 0),
            (44197, 0),
            (44396, 0),
            (44595, 0),
            (44794, 0),
            (44993, 0),
            (45192, 0),
            (45391, 0),
            (45590, 0),
            (45789, 0),
            (45988, 0),
            (46187, 0),
            (46386, 0),
            (46585, 0),
            (46784, 0),
            (46983, 0),
            (47182, 0),
            (47381, 0),
            (47580, 0),
            (47779, 0),
            (47978, 0),
            (48177, 0),
            (48376, 0),
            (48575, 0),
            (48774, 0),
            (48973, 0),
            (49172, 0),
            (49371, 0),
            (49570, 0),
            (49769, 0),
            (49968, 0),
            (50167, 0),
            (50366, 0),
            (50565, 0),
            (50764, 0),
            (50963, 0),
            (51162, 0),
            (51361, 0),
            (51560, 0),
            (51759, 0),
            (51958, 0),
            (52157, 0),
            (52356, 0),
            (52555, 0),
            (52754, 0),
            (52953, 0),
            (53152, 0),
            (53351, 0),
            (53550, 0),
            (53749, 0),
            (53948, 0),
            (54147, 0),
            (54346, 0),
            (54545, 0),
            (54744, 0),
            (54943, 0),
            (55142, 0),
            (55341, 0),
            (55540, 0),
            (55739, 0),
            (55938, 0),
            (56137, 0),
            (56336, 0),
            (56535, 0),
            (56734, 0),
            (56933, 0),
            (57132, 0),
            (57331, 0),
            (57530, 0),
            (57729, 0),
            (57928, 0),
            (58127, 0),
            (58326, 0),
            (58525, 0),
            (58724, 0),
            (58923, 0),
            (59122, 0),
            (59321, 0),
            (59520, 0),
            (59719, 0),
            (59918, 0),
            (60117, 0),
            (60316, 0),
            (60515, 0),
            (60714, 0),
            (60913, 0),
            (61112, 0),
            (61311, 0),
            (61510, 0),
            (61709, 0),
            (61908, 0),
            (62107, 0),
            (62306, 0),
            (62505, 0),
            (62704, 0),
            (62903, 0),
            (63102, 0),
            (63301, 0),
            (63500, 0),
            (63699, 0),
            (63898, 0),
            (64097, 0),
            (64296, 0),
            (64495, 0),
            (64694, 0),
            (64893, 0),
            (65092, 0),
            (65291, 0),
            (65490, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {}",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy10() {
        let inst = load_instance("tests/wasm/memorycopy-10.wasm");

        // Check all memory addresses from comments
        let expected_values = [
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (6, 6),
            (7, 7),
            (8, 8),
            (9, 9),
            (10, 10),
            (11, 11),
            (12, 12),
            (13, 13),
            (14, 14),
            (15, 15),
            (16, 16),
            (17, 17),
            (18, 18),
            (19, 19),
            (20, 20),
            (219, 0),
            (418, 0),
            (617, 0),
            (816, 0),
            (1015, 0),
            (1214, 0),
            (1413, 0),
            (1612, 0),
            (1811, 0),
            (2010, 0),
            (2209, 0),
            (2408, 0),
            (2607, 0),
            (2806, 0),
            (3005, 0),
            (3204, 0),
            (3403, 0),
            (3602, 0),
            (3801, 0),
            (4000, 0),
            (4199, 0),
            (4398, 0),
            (4597, 0),
            (4796, 0),
            (4995, 0),
            (5194, 0),
            (5393, 0),
            (5592, 0),
            (5791, 0),
            (5990, 0),
            (6189, 0),
            (6388, 0),
            (6587, 0),
            (6786, 0),
            (6985, 0),
            (7184, 0),
            (7383, 0),
            (7582, 0),
            (7781, 0),
            (7980, 0),
            (8179, 0),
            (8378, 0),
            (8577, 0),
            (8776, 0),
            (8975, 0),
            (9174, 0),
            (9373, 0),
            (9572, 0),
            (9771, 0),
            (9970, 0),
            (10169, 0),
            (10368, 0),
            (10567, 0),
            (10766, 0),
            (10965, 0),
            (11164, 0),
            (11363, 0),
            (11562, 0),
            (11761, 0),
            (11960, 0),
            (12159, 0),
            (12358, 0),
            (12557, 0),
            (12756, 0),
            (12955, 0),
            (13154, 0),
            (13353, 0),
            (13552, 0),
            (13751, 0),
            (13950, 0),
            (14149, 0),
            (14348, 0),
            (14547, 0),
            (14746, 0),
            (14945, 0),
            (15144, 0),
            (15343, 0),
            (15542, 0),
            (15741, 0),
            (15940, 0),
            (16139, 0),
            (16338, 0),
            (16537, 0),
            (16736, 0),
            (16935, 0),
            (17134, 0),
            (17333, 0),
            (17532, 0),
            (17731, 0),
            (17930, 0),
            (18129, 0),
            (18328, 0),
            (18527, 0),
            (18726, 0),
            (18925, 0),
            (19124, 0),
            (19323, 0),
            (19522, 0),
            (19721, 0),
            (19920, 0),
            (20119, 0),
            (20318, 0),
            (20517, 0),
            (20716, 0),
            (20915, 0),
            (21114, 0),
            (21313, 0),
            (21512, 0),
            (21711, 0),
            (21910, 0),
            (22109, 0),
            (22308, 0),
            (22507, 0),
            (22706, 0),
            (22905, 0),
            (23104, 0),
            (23303, 0),
            (23502, 0),
            (23701, 0),
            (23900, 0),
            (24099, 0),
            (24298, 0),
            (24497, 0),
            (24696, 0),
            (24895, 0),
            (25094, 0),
            (25293, 0),
            (25492, 0),
            (25691, 0),
            (25890, 0),
            (26089, 0),
            (26288, 0),
            (26487, 0),
            (26686, 0),
            (26885, 0),
            (27084, 0),
            (27283, 0),
            (27482, 0),
            (27681, 0),
            (27880, 0),
            (28079, 0),
            (28278, 0),
            (28477, 0),
            (28676, 0),
            (28875, 0),
            (29074, 0),
            (29273, 0),
            (29472, 0),
            (29671, 0),
            (29870, 0),
            (30069, 0),
            (30268, 0),
            (30467, 0),
            (30666, 0),
            (30865, 0),
            (31064, 0),
            (31263, 0),
            (31462, 0),
            (31661, 0),
            (31860, 0),
            (32059, 0),
            (32258, 0),
            (32457, 0),
            (32656, 0),
            (32855, 0),
            (33054, 0),
            (33253, 0),
            (33452, 0),
            (33651, 0),
            (33850, 0),
            (34049, 0),
            (34248, 0),
            (34447, 0),
            (34646, 0),
            (34845, 0),
            (35044, 0),
            (35243, 0),
            (35442, 0),
            (35641, 0),
            (35840, 0),
            (36039, 0),
            (36238, 0),
            (36437, 0),
            (36636, 0),
            (36835, 0),
            (37034, 0),
            (37233, 0),
            (37432, 0),
            (37631, 0),
            (37830, 0),
            (38029, 0),
            (38228, 0),
            (38427, 0),
            (38626, 0),
            (38825, 0),
            (39024, 0),
            (39223, 0),
            (39422, 0),
            (39621, 0),
            (39820, 0),
            (40019, 0),
            (40218, 0),
            (40417, 0),
            (40616, 0),
            (40815, 0),
            (41014, 0),
            (41213, 0),
            (41412, 0),
            (41611, 0),
            (41810, 0),
            (42009, 0),
            (42208, 0),
            (42407, 0),
            (42606, 0),
            (42805, 0),
            (43004, 0),
            (43203, 0),
            (43402, 0),
            (43601, 0),
            (43800, 0),
            (43999, 0),
            (44198, 0),
            (44397, 0),
            (44596, 0),
            (44795, 0),
            (44994, 0),
            (45193, 0),
            (45392, 0),
            (45591, 0),
            (45790, 0),
            (45989, 0),
            (46188, 0),
            (46387, 0),
            (46586, 0),
            (46785, 0),
            (46984, 0),
            (47183, 0),
            (47382, 0),
            (47581, 0),
            (47780, 0),
            (47979, 0),
            (48178, 0),
            (48377, 0),
            (48576, 0),
            (48775, 0),
            (48974, 0),
            (49173, 0),
            (49372, 0),
            (49571, 0),
            (49770, 0),
            (49969, 0),
            (50168, 0),
            (50367, 0),
            (50566, 0),
            (50765, 0),
            (50964, 0),
            (51163, 0),
            (51362, 0),
            (51561, 0),
            (51760, 0),
            (51959, 0),
            (52158, 0),
            (52357, 0),
            (52556, 0),
            (52755, 0),
            (52954, 0),
            (53153, 0),
            (53352, 0),
            (53551, 0),
            (53750, 0),
            (53949, 0),
            (54148, 0),
            (54347, 0),
            (54546, 0),
            (54745, 0),
            (54944, 0),
            (55143, 0),
            (55342, 0),
            (55541, 0),
            (55740, 0),
            (55939, 0),
            (56138, 0),
            (56337, 0),
            (56536, 0),
            (56735, 0),
            (56934, 0),
            (57133, 0),
            (57332, 0),
            (57531, 0),
            (57730, 0),
            (57929, 0),
            (58128, 0),
            (58327, 0),
            (58526, 0),
            (58725, 0),
            (58924, 0),
            (59123, 0),
            (59322, 0),
            (59521, 0),
            (59720, 0),
            (59919, 0),
            (60118, 0),
            (60317, 0),
            (60516, 0),
            (60715, 0),
            (60914, 0),
            (61113, 0),
            (61312, 0),
            (61511, 0),
            (61710, 0),
            (61909, 0),
            (62108, 0),
            (62307, 0),
            (62506, 0),
            (62705, 0),
            (62904, 0),
            (63103, 0),
            (63302, 0),
            (63501, 0),
            (63700, 0),
            (63899, 0),
            (64098, 0),
            (64297, 0),
            (64496, 0),
            (64695, 0),
            (64894, 0),
            (65093, 0),
            (65292, 0),
            (65491, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {}",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy11() {
        let inst = load_instance("tests/wasm/memorycopy-11.wasm");

        // Check all memory addresses from comments
        let expected_values = [
            (198, 0),
            (397, 0),
            (596, 0),
            (795, 0),
            (994, 0),
            (1193, 0),
            (1392, 0),
            (1591, 0),
            (1790, 0),
            (1989, 0),
            (2188, 0),
            (2387, 0),
            (2586, 0),
            (2785, 0),
            (2984, 0),
            (3183, 0),
            (3382, 0),
            (3581, 0),
            (3780, 0),
            (3979, 0),
            (4178, 0),
            (4377, 0),
            (4576, 0),
            (4775, 0),
            (4974, 0),
            (5173, 0),
            (5372, 0),
            (5571, 0),
            (5770, 0),
            (5969, 0),
            (6168, 0),
            (6367, 0),
            (6566, 0),
            (6765, 0),
            (6964, 0),
            (7163, 0),
            (7362, 0),
            (7561, 0),
            (7760, 0),
            (7959, 0),
            (8158, 0),
            (8357, 0),
            (8556, 0),
            (8755, 0),
            (8954, 0),
            (9153, 0),
            (9352, 0),
            (9551, 0),
            (9750, 0),
            (9949, 0),
            (10148, 0),
            (10347, 0),
            (10546, 0),
            (10745, 0),
            (10944, 0),
            (11143, 0),
            (11342, 0),
            (11541, 0),
            (11740, 0),
            (11939, 0),
            (12138, 0),
            (12337, 0),
            (12536, 0),
            (12735, 0),
            (12934, 0),
            (13133, 0),
            (13332, 0),
            (13531, 0),
            (13730, 0),
            (13929, 0),
            (14128, 0),
            (14327, 0),
            (14526, 0),
            (14725, 0),
            (14924, 0),
            (15123, 0),
            (15322, 0),
            (15521, 0),
            (15720, 0),
            (15919, 0),
            (16118, 0),
            (16317, 0),
            (16516, 0),
            (16715, 0),
            (16914, 0),
            (17113, 0),
            (17312, 0),
            (17511, 0),
            (17710, 0),
            (17909, 0),
            (18108, 0),
            (18307, 0),
            (18506, 0),
            (18705, 0),
            (18904, 0),
            (19103, 0),
            (19302, 0),
            (19501, 0),
            (19700, 0),
            (19899, 0),
            (20098, 0),
            (20297, 0),
            (20496, 0),
            (20695, 0),
            (20894, 0),
            (21093, 0),
            (21292, 0),
            (21491, 0),
            (21690, 0),
            (21889, 0),
            (22088, 0),
            (22287, 0),
            (22486, 0),
            (22685, 0),
            (22884, 0),
            (23083, 0),
            (23282, 0),
            (23481, 0),
            (23680, 0),
            (23879, 0),
            (24078, 0),
            (24277, 0),
            (24476, 0),
            (24675, 0),
            (24874, 0),
            (25073, 0),
            (25272, 0),
            (25471, 0),
            (25670, 0),
            (25869, 0),
            (26068, 0),
            (26267, 0),
            (26466, 0),
            (26665, 0),
            (26864, 0),
            (27063, 0),
            (27262, 0),
            (27461, 0),
            (27660, 0),
            (27859, 0),
            (28058, 0),
            (28257, 0),
            (28456, 0),
            (28655, 0),
            (28854, 0),
            (29053, 0),
            (29252, 0),
            (29451, 0),
            (29650, 0),
            (29849, 0),
            (30048, 0),
            (30247, 0),
            (30446, 0),
            (30645, 0),
            (30844, 0),
            (31043, 0),
            (31242, 0),
            (31441, 0),
            (31640, 0),
            (31839, 0),
            (32038, 0),
            (32237, 0),
            (32436, 0),
            (32635, 0),
            (32834, 0),
            (33033, 0),
            (33232, 0),
            (33431, 0),
            (33630, 0),
            (33829, 0),
            (34028, 0),
            (34227, 0),
            (34426, 0),
            (34625, 0),
            (34824, 0),
            (35023, 0),
            (35222, 0),
            (35421, 0),
            (35620, 0),
            (35819, 0),
            (36018, 0),
            (36217, 0),
            (36416, 0),
            (36615, 0),
            (36814, 0),
            (37013, 0),
            (37212, 0),
            (37411, 0),
            (37610, 0),
            (37809, 0),
            (38008, 0),
            (38207, 0),
            (38406, 0),
            (38605, 0),
            (38804, 0),
            (39003, 0),
            (39202, 0),
            (39401, 0),
            (39600, 0),
            (39799, 0),
            (39998, 0),
            (40197, 0),
            (40396, 0),
            (40595, 0),
            (40794, 0),
            (40993, 0),
            (41192, 0),
            (41391, 0),
            (41590, 0),
            (41789, 0),
            (41988, 0),
            (42187, 0),
            (42386, 0),
            (42585, 0),
            (42784, 0),
            (42983, 0),
            (43182, 0),
            (43381, 0),
            (43580, 0),
            (43779, 0),
            (43978, 0),
            (44177, 0),
            (44376, 0),
            (44575, 0),
            (44774, 0),
            (44973, 0),
            (45172, 0),
            (45371, 0),
            (45570, 0),
            (45769, 0),
            (45968, 0),
            (46167, 0),
            (46366, 0),
            (46565, 0),
            (46764, 0),
            (46963, 0),
            (47162, 0),
            (47361, 0),
            (47560, 0),
            (47759, 0),
            (47958, 0),
            (48157, 0),
            (48356, 0),
            (48555, 0),
            (48754, 0),
            (48953, 0),
            (49152, 0),
            (49351, 0),
            (49550, 0),
            (49749, 0),
            (49948, 0),
            (50147, 0),
            (50346, 0),
            (50545, 0),
            (50744, 0),
            (50943, 0),
            (51142, 0),
            (51341, 0),
            (51540, 0),
            (51739, 0),
            (51938, 0),
            (52137, 0),
            (52336, 0),
            (52535, 0),
            (52734, 0),
            (52933, 0),
            (53132, 0),
            (53331, 0),
            (53530, 0),
            (53729, 0),
            (53928, 0),
            (54127, 0),
            (54326, 0),
            (54525, 0),
            (54724, 0),
            (54923, 0),
            (55122, 0),
            (55321, 0),
            (55520, 0),
            (55719, 0),
            (55918, 0),
            (56117, 0),
            (56316, 0),
            (56515, 0),
            (56714, 0),
            (56913, 0),
            (57112, 0),
            (57311, 0),
            (57510, 0),
            (57709, 0),
            (57908, 0),
            (58107, 0),
            (58306, 0),
            (58505, 0),
            (58704, 0),
            (58903, 0),
            (59102, 0),
            (59301, 0),
            (59500, 0),
            (59699, 0),
            (59898, 0),
            (60097, 0),
            (60296, 0),
            (60495, 0),
            (60694, 0),
            (60893, 0),
            (61092, 0),
            (61291, 0),
            (61490, 0),
            (61689, 0),
            (61888, 0),
            (62087, 0),
            (62286, 0),
            (62485, 0),
            (62684, 0),
            (62883, 0),
            (63082, 0),
            (63281, 0),
            (63480, 0),
            (63679, 0),
            (63878, 0),
            (64077, 0),
            (64276, 0),
            (64475, 0),
            (64674, 0),
            (64873, 0),
            (65072, 0),
            (65271, 0),
            (65470, 0),
            (65516, 0),
            (65517, 1),
            (65518, 2),
            (65519, 3),
            (65520, 4),
            (65521, 5),
            (65522, 6),
            (65523, 7),
            (65524, 8),
            (65525, 9),
            (65526, 10),
            (65527, 11),
            (65528, 12),
            (65529, 13),
            (65530, 14),
            (65531, 15),
            (65532, 16),
            (65533, 17),
            (65534, 18),
            (65535, 19),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {}",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy12() {
        let inst = load_instance("tests/wasm/memorycopy-12.wasm");

        // Check all memory addresses from comments
        let expected_values = [
            (198, 0),
            (397, 0),
            (596, 0),
            (795, 0),
            (994, 0),
            (1193, 0),
            (1392, 0),
            (1591, 0),
            (1790, 0),
            (1989, 0),
            (2188, 0),
            (2387, 0),
            (2586, 0),
            (2785, 0),
            (2984, 0),
            (3183, 0),
            (3382, 0),
            (3581, 0),
            (3780, 0),
            (3979, 0),
            (4178, 0),
            (4377, 0),
            (4576, 0),
            (4775, 0),
            (4974, 0),
            (5173, 0),
            (5372, 0),
            (5571, 0),
            (5770, 0),
            (5969, 0),
            (6168, 0),
            (6367, 0),
            (6566, 0),
            (6765, 0),
            (6964, 0),
            (7163, 0),
            (7362, 0),
            (7561, 0),
            (7760, 0),
            (7959, 0),
            (8158, 0),
            (8357, 0),
            (8556, 0),
            (8755, 0),
            (8954, 0),
            (9153, 0),
            (9352, 0),
            (9551, 0),
            (9750, 0),
            (9949, 0),
            (10148, 0),
            (10347, 0),
            (10546, 0),
            (10745, 0),
            (10944, 0),
            (11143, 0),
            (11342, 0),
            (11541, 0),
            (11740, 0),
            (11939, 0),
            (12138, 0),
            (12337, 0),
            (12536, 0),
            (12735, 0),
            (12934, 0),
            (13133, 0),
            (13332, 0),
            (13531, 0),
            (13730, 0),
            (13929, 0),
            (14128, 0),
            (14327, 0),
            (14526, 0),
            (14725, 0),
            (14924, 0),
            (15123, 0),
            (15322, 0),
            (15521, 0),
            (15720, 0),
            (15919, 0),
            (16118, 0),
            (16317, 0),
            (16516, 0),
            (16715, 0),
            (16914, 0),
            (17113, 0),
            (17312, 0),
            (17511, 0),
            (17710, 0),
            (17909, 0),
            (18108, 0),
            (18307, 0),
            (18506, 0),
            (18705, 0),
            (18904, 0),
            (19103, 0),
            (19302, 0),
            (19501, 0),
            (19700, 0),
            (19899, 0),
            (20098, 0),
            (20297, 0),
            (20496, 0),
            (20695, 0),
            (20894, 0),
            (21093, 0),
            (21292, 0),
            (21491, 0),
            (21690, 0),
            (21889, 0),
            (22088, 0),
            (22287, 0),
            (22486, 0),
            (22685, 0),
            (22884, 0),
            (23083, 0),
            (23282, 0),
            (23481, 0),
            (23680, 0),
            (23879, 0),
            (24078, 0),
            (24277, 0),
            (24476, 0),
            (24675, 0),
            (24874, 0),
            (25073, 0),
            (25272, 0),
            (25471, 0),
            (25670, 0),
            (25869, 0),
            (26068, 0),
            (26267, 0),
            (26466, 0),
            (26665, 0),
            (26864, 0),
            (27063, 0),
            (27262, 0),
            (27461, 0),
            (27660, 0),
            (27859, 0),
            (28058, 0),
            (28257, 0),
            (28456, 0),
            (28655, 0),
            (28854, 0),
            (29053, 0),
            (29252, 0),
            (29451, 0),
            (29650, 0),
            (29849, 0),
            (30048, 0),
            (30247, 0),
            (30446, 0),
            (30645, 0),
            (30844, 0),
            (31043, 0),
            (31242, 0),
            (31441, 0),
            (31640, 0),
            (31839, 0),
            (32038, 0),
            (32237, 0),
            (32436, 0),
            (32635, 0),
            (32834, 0),
            (33033, 0),
            (33232, 0),
            (33431, 0),
            (33630, 0),
            (33829, 0),
            (34028, 0),
            (34227, 0),
            (34426, 0),
            (34625, 0),
            (34824, 0),
            (35023, 0),
            (35222, 0),
            (35421, 0),
            (35620, 0),
            (35819, 0),
            (36018, 0),
            (36217, 0),
            (36416, 0),
            (36615, 0),
            (36814, 0),
            (37013, 0),
            (37212, 0),
            (37411, 0),
            (37610, 0),
            (37809, 0),
            (38008, 0),
            (38207, 0),
            (38406, 0),
            (38605, 0),
            (38804, 0),
            (39003, 0),
            (39202, 0),
            (39401, 0),
            (39600, 0),
            (39799, 0),
            (39998, 0),
            (40197, 0),
            (40396, 0),
            (40595, 0),
            (40794, 0),
            (40993, 0),
            (41192, 0),
            (41391, 0),
            (41590, 0),
            (41789, 0),
            (41988, 0),
            (42187, 0),
            (42386, 0),
            (42585, 0),
            (42784, 0),
            (42983, 0),
            (43182, 0),
            (43381, 0),
            (43580, 0),
            (43779, 0),
            (43978, 0),
            (44177, 0),
            (44376, 0),
            (44575, 0),
            (44774, 0),
            (44973, 0),
            (45172, 0),
            (45371, 0),
            (45570, 0),
            (45769, 0),
            (45968, 0),
            (46167, 0),
            (46366, 0),
            (46565, 0),
            (46764, 0),
            (46963, 0),
            (47162, 0),
            (47361, 0),
            (47560, 0),
            (47759, 0),
            (47958, 0),
            (48157, 0),
            (48356, 0),
            (48555, 0),
            (48754, 0),
            (48953, 0),
            (49152, 0),
            (49351, 0),
            (49550, 0),
            (49749, 0),
            (49948, 0),
            (50147, 0),
            (50346, 0),
            (50545, 0),
            (50744, 0),
            (50943, 0),
            (51142, 0),
            (51341, 0),
            (51540, 0),
            (51739, 0),
            (51938, 0),
            (52137, 0),
            (52336, 0),
            (52535, 0),
            (52734, 0),
            (52933, 0),
            (53132, 0),
            (53331, 0),
            (53530, 0),
            (53729, 0),
            (53928, 0),
            (54127, 0),
            (54326, 0),
            (54525, 0),
            (54724, 0),
            (54923, 0),
            (55122, 0),
            (55321, 0),
            (55520, 0),
            (55719, 0),
            (55918, 0),
            (56117, 0),
            (56316, 0),
            (56515, 0),
            (56714, 0),
            (56913, 0),
            (57112, 0),
            (57311, 0),
            (57510, 0),
            (57709, 0),
            (57908, 0),
            (58107, 0),
            (58306, 0),
            (58505, 0),
            (58704, 0),
            (58903, 0),
            (59102, 0),
            (59301, 0),
            (59500, 0),
            (59699, 0),
            (59898, 0),
            (60097, 0),
            (60296, 0),
            (60495, 0),
            (60694, 0),
            (60893, 0),
            (61092, 0),
            (61291, 0),
            (61490, 0),
            (61689, 0),
            (61888, 0),
            (62087, 0),
            (62286, 0),
            (62485, 0),
            (62684, 0),
            (62883, 0),
            (63082, 0),
            (63281, 0),
            (63480, 0),
            (63679, 0),
            (63878, 0),
            (64077, 0),
            (64276, 0),
            (64475, 0),
            (64674, 0),
            (64873, 0),
            (65072, 0),
            (65271, 0),
            (65470, 0),
            (65515, 0),
            (65516, 1),
            (65517, 2),
            (65518, 3),
            (65519, 4),
            (65520, 5),
            (65521, 6),
            (65522, 7),
            (65523, 8),
            (65524, 9),
            (65525, 10),
            (65526, 11),
            (65527, 12),
            (65528, 13),
            (65529, 14),
            (65530, 15),
            (65531, 16),
            (65532, 17),
            (65533, 18),
            (65534, 19),
            (65535, 20),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {}",
                address,
                expected
            );
        }
    }

    #[test]
    fn test_memory_copy13() {
        let inst = load_instance("tests/wasm/memorycopy-13.wasm");

        // Check all memory addresses from comments
        let expected_values = [
            (198, 0),
            (397, 0),
            (596, 0),
            (795, 0),
            (994, 0),
            (1193, 0),
            (1392, 0),
            (1591, 0),
            (1790, 0),
            (1989, 0),
            (2188, 0),
            (2387, 0),
            (2586, 0),
            (2785, 0),
            (2984, 0),
            (3183, 0),
            (3382, 0),
            (3581, 0),
            (3780, 0),
            (3979, 0),
            (4178, 0),
            (4377, 0),
            (4576, 0),
            (4775, 0),
            (4974, 0),
            (5173, 0),
            (5372, 0),
            (5571, 0),
            (5770, 0),
            (5969, 0),
            (6168, 0),
            (6367, 0),
            (6566, 0),
            (6765, 0),
            (6964, 0),
            (7163, 0),
            (7362, 0),
            (7561, 0),
            (7760, 0),
            (7959, 0),
            (8158, 0),
            (8357, 0),
            (8556, 0),
            (8755, 0),
            (8954, 0),
            (9153, 0),
            (9352, 0),
            (9551, 0),
            (9750, 0),
            (9949, 0),
            (10148, 0),
            (10347, 0),
            (10546, 0),
            (10745, 0),
            (10944, 0),
            (11143, 0),
            (11342, 0),
            (11541, 0),
            (11740, 0),
            (11939, 0),
            (12138, 0),
            (12337, 0),
            (12536, 0),
            (12735, 0),
            (12934, 0),
            (13133, 0),
            (13332, 0),
            (13531, 0),
            (13730, 0),
            (13929, 0),
            (14128, 0),
            (14327, 0),
            (14526, 0),
            (14725, 0),
            (14924, 0),
            (15123, 0),
            (15322, 0),
            (15521, 0),
            (15720, 0),
            (15919, 0),
            (16118, 0),
            (16317, 0),
            (16516, 0),
            (16715, 0),
            (16914, 0),
            (17113, 0),
            (17312, 0),
            (17511, 0),
            (17710, 0),
            (17909, 0),
            (18108, 0),
            (18307, 0),
            (18506, 0),
            (18705, 0),
            (18904, 0),
            (19103, 0),
            (19302, 0),
            (19501, 0),
            (19700, 0),
            (19899, 0),
            (20098, 0),
            (20297, 0),
            (20496, 0),
            (20695, 0),
            (20894, 0),
            (21093, 0),
            (21292, 0),
            (21491, 0),
            (21690, 0),
            (21889, 0),
            (22088, 0),
            (22287, 0),
            (22486, 0),
            (22685, 0),
            (22884, 0),
            (23083, 0),
            (23282, 0),
            (23481, 0),
            (23680, 0),
            (23879, 0),
            (24078, 0),
            (24277, 0),
            (24476, 0),
            (24675, 0),
            (24874, 0),
            (25073, 0),
            (25272, 0),
            (25471, 0),
            (25670, 0),
            (25869, 0),
            (26068, 0),
            (26267, 0),
            (26466, 0),
            (26665, 0),
            (26864, 0),
            (27063, 0),
            (27262, 0),
            (27461, 0),
            (27660, 0),
            (27859, 0),
            (28058, 0),
            (28257, 0),
            (28456, 0),
            (28655, 0),
            (28854, 0),
            (29053, 0),
            (29252, 0),
            (29451, 0),
            (29650, 0),
            (29849, 0),
            (30048, 0),
            (30247, 0),
            (30446, 0),
            (30645, 0),
            (30844, 0),
            (31043, 0),
            (31242, 0),
            (31441, 0),
            (31640, 0),
            (31839, 0),
            (32038, 0),
            (32237, 0),
            (32436, 0),
            (32635, 0),
            (32834, 0),
            (33033, 0),
            (33232, 0),
            (33431, 0),
            (33630, 0),
            (33829, 0),
            (34028, 0),
            (34227, 0),
            (34426, 0),
            (34625, 0),
            (34824, 0),
            (35023, 0),
            (35222, 0),
            (35421, 0),
            (35620, 0),
            (35819, 0),
            (36018, 0),
            (36217, 0),
            (36416, 0),
            (36615, 0),
            (36814, 0),
            (37013, 0),
            (37212, 0),
            (37411, 0),
            (37610, 0),
            (37809, 0),
            (38008, 0),
            (38207, 0),
            (38406, 0),
            (38605, 0),
            (38804, 0),
            (39003, 0),
            (39202, 0),
            (39401, 0),
            (39600, 0),
            (39799, 0),
            (39998, 0),
            (40197, 0),
            (40396, 0),
            (40595, 0),
            (40794, 0),
            (40993, 0),
            (41192, 0),
            (41391, 0),
            (41590, 0),
            (41789, 0),
            (41988, 0),
            (42187, 0),
            (42386, 0),
            (42585, 0),
            (42784, 0),
            (42983, 0),
            (43182, 0),
            (43381, 0),
            (43580, 0),
            (43779, 0),
            (43978, 0),
            (44177, 0),
            (44376, 0),
            (44575, 0),
            (44774, 0),
            (44973, 0),
            (45172, 0),
            (45371, 0),
            (45570, 0),
            (45769, 0),
            (45968, 0),
            (46167, 0),
            (46366, 0),
            (46565, 0),
            (46764, 0),
            (46963, 0),
            (47162, 0),
            (47361, 0),
            (47560, 0),
            (47759, 0),
            (47958, 0),
            (48157, 0),
            (48356, 0),
            (48555, 0),
            (48754, 0),
            (48953, 0),
            (49152, 0),
            (49351, 0),
            (49550, 0),
            (49749, 0),
            (49948, 0),
            (50147, 0),
            (50346, 0),
            (50545, 0),
            (50744, 0),
            (50943, 0),
            (51142, 0),
            (51341, 0),
            (51540, 0),
            (51739, 0),
            (51938, 0),
            (52137, 0),
            (52336, 0),
            (52535, 0),
            (52734, 0),
            (52933, 0),
            (53132, 0),
            (53331, 0),
            (53530, 0),
            (53729, 0),
            (53928, 0),
            (54127, 0),
            (54326, 0),
            (54525, 0),
            (54724, 0),
            (54923, 0),
            (55122, 0),
            (55321, 0),
            (55520, 0),
            (55719, 0),
            (55918, 0),
            (56117, 0),
            (56316, 0),
            (56515, 0),
            (56714, 0),
            (56913, 0),
            (57112, 0),
            (57311, 0),
            (57510, 0),
            (57709, 0),
            (57908, 0),
            (58107, 0),
            (58306, 0),
            (58505, 0),
            (58704, 0),
            (58903, 0),
            (59102, 0),
            (59301, 0),
            (59500, 0),
            (59699, 0),
            (59898, 0),
            (60097, 0),
            (60296, 0),
            (60495, 0),
            (60694, 0),
            (60893, 0),
            (61092, 0),
            (61291, 0),
            (61440, 0),
            (61441, 1),
            (61442, 2),
            (61443, 3),
            (61444, 4),
            (61445, 5),
            (61446, 6),
            (61447, 7),
            (61448, 8),
            (61449, 9),
            (61450, 10),
            (61451, 11),
            (61452, 12),
            (61453, 13),
            (61454, 14),
            (61455, 15),
            (61456, 16),
            (61457, 17),
            (61458, 18),
            (61459, 19),
            (61510, 0),
            (61709, 0),
            (61908, 0),
            (62107, 0),
            (62306, 0),
            (62505, 0),
            (62704, 0),
            (62903, 0),
            (63102, 0),
            (63301, 0),
            (63500, 0),
            (63699, 0),
            (63898, 0),
            (64097, 0),
            (64296, 0),
            (64495, 0),
            (64694, 0),
            (64893, 0),
            (65092, 0),
            (65291, 0),
            (65490, 0),
        ];

        for (address, expected) in expected_values.iter() {
            let params = vec![Val::Num(Num::I32(*address))];
            let ret = call_function(&inst, "load8_u", params);
            assert_eq!(
                ret.unwrap().last().unwrap().to_i32().unwrap(),
                *expected,
                "Memory load at address {} should be {}",
                address,
                expected
            );
        }
    }
}
